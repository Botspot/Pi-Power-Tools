#!/bin/bash
DIRECTORY="$(dirname $0)"

#ensure prerequesites are installed
${DIRECTORY}/installgui "yad systemd-container xserver-xephyr expect" &>/dev/null || exit 0

#main loop
while true;do

#if imglist exists, ensure all lines contain valid files
if [ -f "${DIRECTORY}/imglist" ];then #if imglist exists
  #number of lines in file
  numlines=$(wc -l "${DIRECTORY}/imglist" | awk '{ print $1 }')
  #echo $numlines
  if [ $numlines -gt 0 ];then #if imglist contains any lines
    awk -i inplace '! a[$0]++' "${DIRECTORY}/imglist" #remove duplicate lines
    i=1
    while [ $i -le $numlines ]; do #repeat until all lines are checked
      line=$(sed -n "${i}p" < "${DIRECTORY}/imglist") #read that line of text file
      #echo $line
      if [ ! -f $line ];then #if line is file not found
        #echo "not exist!"
        sed -i "${i}d" "${DIRECTORY}/imglist" #delete the line
      fi
      i=$((i+1)) #increase line number by 1 to check the next one
    done
    imglist="$(cat ${DIRECTORY}/imglist | tr '\n' '!')"
    imglist="!${imglist::-1}"
  fi
fi

repeat=2 #starts out as 2 so script can tell the difference
while [ $repeat -gt 0 ];do
repeat=0 #if changed to 1 later, the main dialog will open again
(echo "# "
sleep infinity)| yad --progress --pulsate --title="Scanning devices" \
	--text="Scanning Devices..." --window-icon="${DIRECTORY}/icons/logo-64.png" \
	--width=300 --height=100 --center --auto-close --auto-kill \
	--no-buttons --skip-taskbar 2>/dev/null &
child_pid=$!
sleep 0.5
parted_out="$(sudo parted -lm 2>/dev/null | grep '/dev/*')"
kill $child_pid

device_paths="$(echo $parted_out | tr ';' '\n' | tr -d ' ' | awk -F ":" '{print $1}')"
device_sizes="$(echo $parted_out | tr ';' '\n' | awk -F ":" '{print $2}')"
device_names="$(echo $parted_out | tr ';' '\n' | awk -F ":" '{print $7}')"

#echo "$parted_out"
#echo "$device_paths"
#echo "$device_sizes"
#echo "$device_names"

device_list="Device\nSize\nName\n$(paste -d '\n' <(echo "$device_paths") <(echo "$device_sizes") <(echo "$device_names"))"
#echo -e "$device_list"

#echo "$imglist"
#if yad exits uncleanly it leaves behind a problematic memory file
#this deletes it
ipcrm -M 12345 &>/dev/null

echo -e "Welcome to Pi Power Tools!\nManages usb drives and disk images\n\nClick USB Drive or IMG File above.\nChoose a device from the list.\nThen click an action below.\nhttps://www.raspberrypi.org/forums/" | yad --plug=12345 --tabnum=1 --text-info \
	--wrap --justify=center --fore=#80FFFF --back=#000000 \
	--image=${DIRECTORY}/icons/logo-tall.png --show-uri \
	2>/dev/null &\

output="$(echo -e "$device_list" | yad --plug=12345 --tabnum=2 --list --no-headers --no-click --separator='\n' \
	--column=Device --column=Size --column=Name \
	--image=${DIRECTORY}/icons/usb-64.png \
	--print-column=1 2>/dev/null &\

yad --plug=12345 --tabnum=3 --form --separator='\n' \
	--field="Paste path::CBE" "$imglist" \
	--field="Or find one:":FL --file-filter="*.img" ${HOME}/Downloads \
	--field="IMG-specific tools::LBL" '' \
	--field="Image-Utils GUI...!"${DIRECTORY}/icons/toolbox.png"!RonR"\'"s image-utils wrapped in a graphical frontend.":fbtn -c "${DIRECTORY}/image-utils-gui" \
	--field="Advanced Mount...!"${DIRECTORY}/icons/toolbox.png"!Control exactly how and where to mount each partition.":fbtn -c "${DIRECTORY}/advmount" \
	--image="${DIRECTORY}/icons/img-64.png" 2>/dev/null &\

yad --notebook --key=12345 --title='Pi Power Tools' --width=530 --height=260 --center --window-icon="${DIRECTORY}/icons/logo-64.png" \
	--tab="Home!${DIRECTORY}/icons/home.png" \
	--tab="USB Drive!${DIRECTORY}/icons/usb-16.png!Includes any storage device your Pi can detect, including its internal SD card." \
	--tab="IMG File!${DIRECTORY}/icons/img-16.png!These files end with .img and you flash them to SD cards."  \
	--button=!"${DIRECTORY}/icons/refresh.png"!'Click this to refresh the USB Device list.:3' \
	--button=Flash!"${DIRECTORY}/icons/burn.png"!'Copy everything from an img to a device.:6' \
	--button=Boot!"${DIRECTORY}/icons/power.png"!'Boots the selected like a virtual machine.:2' \
	--button=View!"${DIRECTORY}/icons/search.png"!'This lets you view the files.:0' \
	--button=Edit!"${DIRECTORY}/icons/tool.png"!'This edits the partitions using gparted.:4' \
	--buttons-layout=end 2>/dev/null)"

button=$? #get exit code to determine which button was pressed
echo "$output"
echo EOO
#echo "$button"

if [ $button -eq 252 ];then #if window manager x was pressed
  exit 0
fi

if [ ! $button -eq 3 ]&&[ ! $button -eq 6 ];then #only parse if refresh button was not the one clicked
  #parse
  output_length=$(echo -n "$output" | grep -c '^')
  
  if [ $output_length -eq 2 ];then
    DEV=""
    IMG="$(echo "$output" | sed -n '1p')"
    DIR="$(echo "$output" | sed -n '2p')"
  elif [ $output_length -eq 4 ];then
    DEV="$(echo "$output" | sed -n '1p')"
    IMG="$(echo "$output" | sed -n '3p')"
    DIR="$(echo "$output" | sed -n '4p')"
  else
    echo "output not the correct length!"
    exit 1
  fi
  echo "DEV: ${DEV}"
  echo "IMG: ${IMG}"
  echo "DIR: ${DIR}"
  
  DEVimp=1 #if these remain 1 then they are important
  DIRimp=1
  IMGimp=1

  #determine the intended selection
  if [ -z $DEV ] || [ $DEV = Device ];then
    #echo "dev is not important."
    DEVimp=0
  fi
  
  if [ -z $DIR ] || [ $DIR = ${HOME}/Downloads ];then
    #echo "dir is not important."
    DIRimp=0
  fi
  
  if [ -z $IMG ];then
    #echo "img is not important."
    IMGimp=0
  fi
  
  if [ $((IMGimp+DIRimp+DEVimp)) -gt 1 ];then
    #Multiple selected error
    repeat=1
    yad --title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
    --text="Mind reading is not supported.\n\n(It looks like you selected multiple devices.)\nTry again?" \
    --center --text-align=center \
    --button="No!${DIRECTORY}/icons/exit.png:1" --button="Yes!${DIRECTORY}/icons/forward.png:0" 2>/dev/null || exit 0
    
  elif [ $((IMGimp+DIRimp+DEVimp)) -eq 0 ];then
    #Nothing selected error
    repeat=1
    yad --title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
    --text="Mind reading is not supported.\n\n(It looks like you did not select any devices.)\nTry again?" \
    --center --text-align=center \
    --button="No!${DIRECTORY}/icons/exit.png:1" --button="Yes!${DIRECTORY}/icons/forward.png:0" 2>/dev/null || exit 0
    
  elif [ $((IMGimp+DIRimp+DEVimp)) -eq 1 ];then
    #One selected
    if [ $IMGimp = 1 ];then
      CHOICE="$IMG"
      MIME=image
    fi
    if [ $DIRimp = 1 ];then
      CHOICE="$DIR"
      MIME=image
    fi
    if [ $DEVimp = 1 ];then
      CHOICE="$DEV"
      MIME=device
    fi
    echo "You chose: ${CHOICE}"
  fi
fi #all of the above is skipped if refresh button was clicked

#repeat again if the refresh button was pressed
if [ $button -eq 3 ];then
  repeat=1
fi
done #if repeat is 1 then the while loop will repeat again

#detect mimetype
if [ "$MIME" = image ];then
  # IMG FILE
  if [[ "$CHOICE" == *".img" ]] && [ -f "$CHOICE" ];then #ensure disk image exists
    echo "Disk image detected."
    echo "$CHOICE" >> "${DIRECTORY}/imglist"
  elif [ -d "$CHOICE" ];then #if directory
    echo "Directory detected."
    MIME=directory #change mime type to directory
  else
    echo "No such file or directory."
    yad --title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
    	--text="Could not locate a disk image at the location you specified." \
    	--center --text-align=center \
    	--button="Close!${DIRECTORY}/icons/exit.png:1" 2>/dev/null
    exit 1
  fi
elif [ "$MIME" = device ];then
  #if block device does not exist
  if [ ! -b "$CHOICE" ];then
    yad --title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
    	--text="Could not locate that device. You likely unplugged it." \
    	--center --text-align=center \
    	--button="Close!${DIRECTORY}/icons/exit.png:1" 2>/dev/null
    exit 1
  fi
  #block device must exist past this point
fi

echo "Mimetype is: ${MIME}"
mntpnt=/media/pi/pi-power-tools
case $button in

  1)
    echo "Error"
    exit 1
    ;;

  2)
    echo "Boot"
    lxterminal --title="Boot Console" -e "sudo ${DIRECTORY}/vdesktop/vdesktop $CHOICE;sleep 10"
    #wait until vdesktop is closed before reopening UI
    while ps -C vdesktop >/dev/null;do   sleep 1; done
    ;;

  0)
    echo -n "View "
    if [ "$MIME" = image ];then
      echo image
      LOOP="$(sudo losetup -fP --show $CHOICE)" #create loopback device
      
      sudo mount -o rw "${LOOP}p2" "$mntpnt"
      sudo mount -o rw "${LOOP}p1" "${mntpnt}/boot"
      
      pcmanfm -n "$mntpnt" #view the files
      yad --title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
    	--text="Close this window when you are finished viewing the files." \
    	--center --text-align=center \
    	--button="Close!${DIRECTORY}/icons/exit.png:1" 2>/dev/null
      sudo losetup -d "$LOOP" &>/dev/null #delete loopback device
      sudo umount -fl "${mntpnt}/boot" &>/dev/null
      sudo umount -fl "$mntpnt" &>/dev/null
    elif [ "$MIME" = device ];then
      echo device
      BLKS="$(lsblk -rno PATH $CHOICE)"
      BOOT_PART="$(echo "$BLKS" | sed -n '2p')"
      ROOT_PART="$(echo "$BLKS" | sed -n '3p')"
      
      #get subdevices
      partitions="$(lsblk $CHOICE -no PATH | tail -n +2 | tr '\n' ' ')"
      echo "Subdevices: ${partitions}"
      #unmount subdevices twice in case one is a dependency of the other
      sudo umount $partitions
      sudo umount $partitions
      
      sudo rm -rf "$mntpnt"
      sudo mkdir "$mntpnt"
      
      sudo mount -o rw --source $ROOT_PART --target "$mntpnt"
      sudo mount -o rw --source $BOOT_PART --target "${mntpnt}/boot"
      pcmanfm -n "$mntpnt"
      yad --title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
      	--text="Close this window when you are finished viewing the files." \
      	--center --text-align=center \
      	--button="Close!${DIRECTORY}/icons/exit.png:1" 2>/dev/null
      echo 'unmounting dev'
      sudo umount -fl "${mntpnt}/boot"
      sudo umount -fl "$mntpnt"
    elif [ "$MIME" = directory ];then
      echo directory
      pcmanfm -n "$CHOICE"
    fi
    ;;

  4)
    echo -n "Edit "
    if [ "$MIME" = image ];then
      ${DIRECTORY}/installgui "gparted" &>/dev/null || exit 0
      echo image
      LOOP="$(sudo losetup -fP --show $CHOICE)" #create loopback device
    
      echo $LOOP
      if [ -z $LOOP ];then
        echo "Could not create loopback device."
        exit 1
      fi
      sudo gparted "$LOOP"
      sudo losetup -d "$LOOP" &>/dev/null #delete loopback device
    elif [ "$MIME" = device ];then
      ${DIRECTORY}/installgui "gparted" || exit 0
      echo device
      sudo gparted "$CHOICE"
    elif [ "$MIME" = directory ];then
      echo folder
      yad --title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
    	--text="Sorry, you can"\'"t edit a folder.\nNice try...\n\n😊" \
    	--center --text-align=center \
    	--button="Close!${DIRECTORY}/icons/exit.png:1" 2>/dev/null
      exit 0
    fi
    ;;
  6)
    echo "Flash"
    ${DIRECTORY}/flash
    ;;
  *)
    echo "unknown"
    ;;
esac
echo ""
done
exit
