#!/bin/bash
DIRECTORY="$(dirname $0)"

# ensure vdesktops files have correct permissions
chgrp shadow "${DIRECTORY}/shadow"
chown root "${DIRECTORY}/shadow"
chmod +x "${DIRECTORY}/rc.local"

CURRENT_VER="$(wget -qO- https://raw.githubusercontent.com/Botspot/vdesktop/master/version)"
LOCAL_VER="$(head -n 1 "${DIRECTORY}/version")"
if [ $CURRENT_VER -gt $LOCAL_VER ];then
  echo "Version ${CURRENT_VER} is available. Would you like to download it? [Y/n]" | fold -s
  read yesno
  if [[ "$yesno" == "n" ]]; then
    echo "OK, Vdesktop will not download the new version."
  else
    echo "OK. Downloading Vdesktop."
    cd "${DIRECTORY}"
    rm -rf "${DIRECTORY}.new"
    sudo -u pi git clone https://github.com/Botspot/vdesktop "${DIRECTORY}.new"
    chmod +x "${DIRECTORY}.new/vdesktop"
    chgrp shadow "${DIRECTORY}.new/shadow"
    chown root "${DIRECTORY}.new/shadow"
    echo ""
    NEW_VER="$(head -n 1 "${DIRECTORY}.new/version")"
    if [ $NEW_VER -gt $LOCAL_VER ];then
      echo "New version has been downloaded. Old version is located in ${DIRECTORY}.old"
      rm -rf "${DIRECTORY}.old"
      sudo -u pi mv -f "${DIRECTORY}/" "${DIRECTORY}.old"
      sudo -u pi mv -f "${DIRECTORY}.new/" "${DIRECTORY}"
      if [ $NEW_VER -eq "$(head -n 1 "${DIRECTORY}/version")" ];then
        echo "Copied to successfully."
        exit 0
      else
        echo "Was not able to copy the updated version to. Run these commands to install manually:" | fold -s
        echo ""
        echo "rm -rf"
        echo "git clone https://github.com/Botspot/vdesktop"
        echo "chmod +x/vdesktop"
        echo ""
        exit 1
      fi
    else
      echo "Download was not successful."
      
      exit 1
    fi
  fi
  rm -rf "${DIRECTORY}.new"
fi
#echo "Script located in:"
#echo $DIRECTORY
if [ -z "$1" ]; then
  echo "You did not specify what to boot."
  lsblk -o PATH,MODEL,SIZE
  if [ $(id -u) -ne 0 ]; then
    echo "And you did not run this script as root user."
  fi
  echo ""
  echo "Vdesktop can boot from an image file:   sudo vdesktop /home/pi/2019-09-26-raspbian-buster.img"
  echo "Or a block device:                      sudo vdesktop /dev/sda"
  echo "Or a Raspbian root directory:           sudo vdesktop /home/pi/old-raspbian/"
  exit 0
# Ensure being run as root
elif [ $(id -u) -ne 0 ]; then
  echo "You did not run this script as root user."
  exit 0
fi
#apt -y install xserver-xephyr systemd-container

function cleanup {
  echo ""
  echo "Preparing to exit..."
  printf '\e]12;#AAAAAA\a' # change cursor color back to lxterminal default
  
  # unmount modifications to the guest
  umount "${mntpnt}/etc/rc.local" &>/dev/null
  umount "${mntpnt}/etc/profile" &>/dev/null
  umount "${mntpnt}/etc/shadow" &>/dev/null
  umount "${mntpnt}/var/lib/dbus/machine-id" &>/dev/null
  umount "${mntpnt}/etc/machine-id" &>/dev/null
  
  # Sometimes Xephyr does not close automatically after container is terminated.
  killall Xephyr &>/dev/null
  
  umount -fl "${mntpnt}/boot" &>/dev/null
  umount -fl "$mntpnt" &>/dev/null
  losetup -d "$LOOP" &>/dev/null
  
  rm "${DIRECTORY}/machine-id" &>/dev/null
  echo "Unmounted and exiting..."
  machinectl poweroff virtualdesktop &>/dev/null
  killall vdesktop
}

trap cleanup EXIT

PKG_NAMES="" # list of pretty names to show user
PKG_LIST="" # list of package names to show apt

# ensure systemd-nspawn is installed
REQ_PKG=systemd-container
REQ_NAME=Systemd-nspawn
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' "$REQ_PKG"|grep "install ok installed")
if [ "" == "$PKG_OK" ]; then
  PKG_NAMES="${PKG_NAMES}, ${REQ_NAME}" # add user-friendly package name to list
  PKG_LIST="${PKG_LIST} ${REQ_PKG}" # add apt-friendly package name to list
fi

# ensure xephyr is installed
REQ_PKG=xserver-xephyr
REQ_NAME=Xephyr
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' "$REQ_PKG"|grep "install ok installed")
if [ "" == "$PKG_OK" ]; then
  PKG_NAMES="${PKG_NAMES}, ${REQ_NAME}" # add user-friendly package name to list
  PKG_LIST="${PKG_LIST} ${REQ_PKG}" # add apt-friendly package name to list
fi

# ensure expect is installed
REQ_PKG=expect
REQ_NAME=Expect
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' "$REQ_PKG"|grep "install ok installed")
if [ "" == "$PKG_OK" ]; then
  PKG_NAMES="${PKG_NAMES}, ${REQ_NAME}" # add user-friendly package name to list
  PKG_LIST="${PKG_LIST} ${REQ_PKG}" # add apt-friendly package name to list
fi

# delete first comma. From ", Systemd-nspawn, Xephyr and Expect" to "Systemd-nspawn, Xephyr and Expect"
PKG_NAMES="$(sed 's/, //' <<< $PKG_NAMES)"
# replace last comma with and. From ", Systemd-nspawn, Xephyr, Expect" to ", Systemd-nspawn, Xephyr and Expect"
PKG_NAMES="$(sed 's/\(.*\), /\1 and /' <<< $PKG_NAMES)"
# delete first space from apt list. From " systemd-container ..." to "systemd-container ..."
PKG_LIST="$(sed 's/ //' <<< $PKG_LIST)"

if [[ ! -z "$PKG_LIST" ]]; then
  if [ "$(wc -w <<< "$PKG_NAMES")" -gt 1 ]; then # if only one package, change "need" to "needs".
    echo "${PKG_NAMES} need to be installed for vdesktop to work. Proceed? [Y/n]" | fold -s
  else
    echo "${PKG_NAMES} needs to be installed for vdesktop to work. Proceed? [Y/n]" | fold -s
  fi
  read yesno
  if [[ "$yesno" == "n" ]]; then
    exit 0
  else
    # PKG_LIST must not be in quotes so apt sees them as seperate packages
    apt --force-yes --yes install $PKG_LIST || exit 1
  fi
fi


mntpnt="/media/pi/vdesktop" # if .img file or block device, this is default mount point
mkdir "${mntpnt}" &>/dev/null
umount -fl "${mntpnt}" &>/dev/null

# if user accidentally shutdown the host while guest was running, systemd masks "-.mount" by default. 
# This ensures -.mount is not masked, though it usually takes a reboot to see any effect.
systemctl unmask  -- -.mount 

echo -e "Message from \e[32mBotspot\e[39m: $(wget -qO- https://raw.githubusercontent.com/Botspot/vdesktop-message/master/message-text)" | fold -s

# IMG FILE
if [[ "$1" == *".img" ]] && [ -f "$1" ]; then
  echo "OK, looks like you specified a disk image."
  LOOP="$(losetup -fP --show $1)"
  echo "$LOOP"
  mount -o rw "${LOOP}p2" "$mntpnt"
  mount -o rw "${LOOP}p1" "${mntpnt}/boot"

# BLOCK DEVICE
elif [ -b "$1" ]; then
  echo "OK, looks like you specified a /dev location or block device" | fold -s
  if [[ "$1" == *[1-9] ]]; then
    umount -l "$1" &>/dev/null #ensure it is unmounted
  else

    # check if partition 2 exists
    if [ -b "${1}2" ]; then 
      echo "Partiton 2 exists. Booting..."
      partnum=2

      # try partition 1
    elif [ -b "${1}1" ]; then 
      echo "Partition 2 does not exist. Vdesktop will attempt to boot partition 1." | fold -s
      partnum=1
    else
      # neither 1 nor 2 exist
      echo "Could not detect any partitions!"
      exit 1
    fi
  fi
    rootdev=$(echo "$(findmnt / -fnr)" | awk '{print $2}') # Which block device is mounted to  filesystem root

    # if guest uuid is equal to filesystem roots uuid
    if [[ "$(echo "$(udevadm info -q all -n $1${partnum} | grep 'by-uuid')" | awk '{print $2}'| head -n 1)" == "$(echo "$(udevadm info -q all -n $rootdev | grep 'by-uuid')" | awk '{print $2}'| head -n 1)" ]]; then
      echo "The device you are trying to boot from and your microSD have the same UUID."
      echo "Vdesktop can fix the problem by changing the UUID. Proceed? [Y/n]"
      read answer 
      if [ "$answer" == "n" ]; then
        echo "UUID not changed. Exiting."
        exit 0
      else
        echo "Alright, changing the UUID"
        tune2fs "$1${partnum}" -U random
      fi
    fi
  # finally mount the block device
  umount "$1${partnum}" &>/dev/null
  mount "$1${partnum}" "$mntpnt" -o suid
  if [ $partnum -eq 2 ]; then #mount partition 1 at boot in guest
    umount "${1}1" &>/dev/null
    mount "${1}1" "${mntpnt}/boot" -o suid
    echo "mounting boot as well"
  fi

# PREVENT BOOTING ROOT
elif [ "$1" == "/" ]; then
  echo "You cannot boot from Filesystem Root."
  exit 0

# DIRECTORY
elif [ -d "$1" ]; then
  echo "OK, looks like you specified a directory"
  # mount the specified directory to /media/pi/vdesktop
  mount --bind "$1" "$mntpnt"
# NOT_FOUND
else
  echo "No such file or directory. Check spelling and try again."
  if [[ "$1" == "/dev/"* ]]; then
    lsblk -o PATH,MODEL,SIZE
  fi
  exit 1
fi

if [ $mntpnt == "*/" ]; then # ensure there is no trailing slash
  mntpnt=${mntpnt: :-1}
fi
mount -n -o remount,suid,rw "$mntpnt" # remount to allow root access

# sed -i "/exit 0/i\/usr/bin/vncserver-virtual &" "${mntpnt}/etc/rc.local"

if diff "${mntpnt}/etc/machine-id" "/etc/machine-id" > /dev/null
then
  echo "Temporarily changing Machine ID"
  dbus-uuidgen --ensure="${DIRECTORY}/machine-id"
  mount --bind "${DIRECTORY}/machine-id" "${mntpnt}/var/lib/dbus/machine-id"
  mount --bind "${DIRECTORY}/machine-id" "${mntpnt}/etc/machine-id"
  # rm -f "${mntpnt}/etc/machine-id"
fi

/bin/echo -e "Your cursor color will be \e[44mblue\e[49m until the container is terminated."
echo "Booting in 5 seconds."

# terminate any previous instances of the machine in case it did not exit cleanly
machinectl terminate virtualdesktop &>/dev/null

sleep 5
# mount .profile and rc.local in guest to start lxsession before login.
mount --bind "${DIRECTORY}/profile" "${mntpnt}/etc/profile"
mount --bind "${DIRECTORY}/rc.local" "${mntpnt}/etc/rc.local"

# start Xephyr when an additional instance of lxsession is detected.
INITIAL_X_INSTANCES="$(pgrep lxsession | wc -l)"
eval 'while [ "$INITIAL_X_INSTANCES" -eq "$(pgrep lxsession | wc -l)" ]; do true; sleep 0.01; done; Xephyr -title Vdesktop -ac -screen 1270x960 -br -resizeable 2>/dev/null :1' &

# mounting shadow password file to guest ensures the password is raspberry.
mount --bind "${DIRECTORY}/shadow" "${mntpnt}/etc/shadow"
if [ -f "${DIRECTORY}/autologin" ]; then
  echo "Autologin file detected, booting in auto-login mode."
  #change cursor color while in guest so user does not forget
  printf '\e]12;#0000AA\a'
  # boot the guest
  echo ""
  echo ""
  /usr/bin/expect -c 'set timeout -1
  spawn systemd-nspawn --machine virtualdesktop -bD /media/pi/vdesktop
  expect -re ".*raspberrypi login: "
  send -- "pi\r"
  expect -re ".*Password: "
  send -- "raspberry\r"
  interact
  expect eof'
else
  #autologin file not found
  echo "Autologin file not detected, you will have to login yourself. Press Enter to continue."
  read ""
  #change cursor color while in guest so user does not forget
  printf '\e]12;#0000AA\a' 
  # boot the guest
  echo ""
  echo ""
  systemd-nspawn --machine "virtualdesktop" -bD "$mntpnt"
fi

echo ""
killall Xephyr &>/dev/null
echo "The machine has exited, but you can still access the guest. Press Ctrl+C to unmount ${mntpnt}"

#change cursor color back to lxterminal default
printf '\e]12;#AAAAAA\a'

sleep infinity
