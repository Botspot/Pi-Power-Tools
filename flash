#!/bin/bash
DIRECTORY="$(dirname $0)"

while true;do

imglist=''
#if imglist exists, ensure all lines contain valid files
if [ -f "${DIRECTORY}/imglist" ];then #if imglist exists
  #number of lines in file
  numlines=$(wc -l "${DIRECTORY}/imglist" | awk '{print $1}')
  echo "Numlines: $numlines"
  if [ $numlines -gt 0 ];then #if imglist contains any lines
    awk -i inplace '! a[$0]++' "${DIRECTORY}/imglist" #remove duplicate lines
    i=1
    while [ $i -le $numlines ]; do #repeat until all lines are checked
      line=$(sed -n "${i}p" < "${DIRECTORY}/imglist") #read that line of text file
      #echo $line
      if [ ! -f $line ];then #if line is file not found
        #echo "not exist!"
        sed -i "${i}d" "${DIRECTORY}/imglist" #delete the line
      fi
      i=$((i+1)) #increase line number by 1 to check the next one
    done
    imglist="$(cat ${DIRECTORY}/imglist | tr '\n' '!')"
  fi
fi
imglist="${imglist}Download Raspbian Desktop Full!Download Raspbian Desktop!Download Raspbian Lite"
echo "parsed imglist to ${imglist}EOI"

#find which partition is mounted to filesystem root
rootdev="$(sudo findmnt -nmo TARGET,SOURCE | grep "/    " | awk '{print $2}')"
#find which device hosts that partition
rootdev="/dev/$(lsblk -no pkname $rootdev)"
#something fishy is going on if the concluded device does not exist.
if [ ! -b $rootdev ];then
  echo "Could not detect which partition mounts filesystem root!"
  echo "Exiting"
  exit 1
fi
echo "Omitting root device from list: ${rootdev}"

# V lists all devices            Remove junk output V        V omit root device
parted_out="$(sudo parted --script -lm | grep '/dev/*' | grep -v $rootdev )"
echo "parted out"
device_names="$(echo $parted_out | tr ';' '\n' | awk -F ":" '{print $7}' )"
device_paths="$(echo $parted_out | tr ';' '\n' | awk -F ":" '{print $1}' | tr -d ' ')"

devicelist="$(paste -d ' ' <(echo "$device_paths") <(echo "$device_names") | tr '\n' '!')"
devicelist="${devicelist::-1}"
echo "Devicelist: ${devicelist}EOD"

#repeat until a flash-to device is available
while [ "$devicelist" = " " ];do
  echo "No flash-to devices available!"
  output="$(yad --form --separator='\n' --center --width=500 --height=100 \
  	--title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
  	--text="<b>No flash-to devices found.</b>" \
  	--field="From::CBE" "$imglist" \
  	--field="To::CB" "None found. Plug 1 in, then click Refresh." \
  	--button='Cancel'!"${DIRECTORY}/icons/exit.png":1 \
  	--button='Refresh'!"${DIRECTORY}/icons/refresh.png":0 \
  	2>/dev/null)"
  button=$?
  if [ $button -eq 0 ];then
    #refresh devicelist
    
    #find which partition is mounted to filesystem root
    rootdev="$(sudo findmnt -nmo TARGET,SOURCE | grep "/    " | awk '{print $2}')"
    #find which device hosts that partition
    rootdev="/dev/$(lsblk -no pkname $rootdev)"
    #something fishy is going on if the concluded device does not exist.
    if [ ! -b $rootdev ];then
      echo "Could not detect which partition mounts filesystem root!"
      echo "Exiting"
      exit 1
    fi
    echo "Omitting root device from list: ${rootdev}"
    
    # V lists all devices            Remove junk output V        V omit root device
    parted_out="$(sudo parted --script -lm | grep '/dev/*' | grep -v $rootdev )"
    echo "parted out"
    device_names="$(echo $parted_out | tr ';' '\n' | awk -F ":" '{print $7}' )"
    device_paths="$(echo $parted_out | tr ';' '\n' | awk -F ":" '{print $1}' | tr -d ' ')"
    
    devicelist="$(paste -d ' ' <(echo "$device_paths") <(echo "$device_names") | tr '\n' '!')"
    devicelist="${devicelist::-1}"
    echo "Devicelist: ${devicelist}EOD"
    
  else
    exit 0
  fi
done
#after this point, at least 1 flash-to device must be available

output="$(yad --form --separator='\n' --center --width=500 --height=100 \
	--title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
	--text="This flashes SD cards.  ZIP and IMG files supported." \
	--field="From::CBE" "$imglist" \
	--field="To::CB" "$devicelist" \
	--button='Cancel'!"${DIRECTORY}/icons/exit.png":1 \
	--button='Flash'!"${DIRECTORY}/icons/burn.png":0 \
	2>/dev/null)"
button=$?

#echo "Output: ${output}EOO"
echo "Button: ${button}EOB"

FROM="$(echo "$output" | sed -n '1p')"
TO="$(echo "$output" | sed -n '2p' | awk '{print $1}')"
#VERIFY="$(echo "$output" | sed -n '3p')"

echo "From: $FROM"
echo "To: $TO"
#echo "Verify: $VERIFY"

if [ $button -eq 252 ] || [ $button -eq 143 ] || [ $button -eq 1 ];then
  #if window manager x was pressed
  #                     or if yad was killed
  #                                           or if cancel was pressed
  #then exit the program
  exit 0
fi

#get subdevices
partitions="$(lsblk $TO -no PATH | tail -n +2 | tr '\n' ' ')"
echo "Subdevices: ${partitions}"
#unmount subdevices twice in case one is a dependency of the other
sudo umount $partitions 2>/dev/null
sudo umount $partitions 2>/dev/null

if [ "$(echo "$FROM" | awk '{print $1}')" = "Download" ];then
  #Download mode
  
  #convert device path to device name
  devname="$(lsblk -o name,path | grep "$TO" | awk '{print $1}' | head -n 1)"
  echo "Devname: ${devname}EOD"
  
  #convert user-friendly name to mirror URL
  if [ "$FROM"  = 'Download Raspbian Desktop Full' ];then
    #echo full
    URL='https://downloads.raspberrypi.org/raspbian_full_latest'
  elif [ "$FROM" = 'Download Raspbian Desktop' ];then
    #echo desktop
    URL='https://downloads.raspberrypi.org/raspbian_latest'
  elif [ "$FROM" = 'Download Raspbian Lite' ];then
    #echo lite
    URL='https://downloads.raspberrypi.org/raspbian_lite_latest'
  else
    echo "Unrecognized download site!"
    exit 1
  fi
  echo "Download URL is $URL"
  
  #prompt user for which download program
  output="$(echo -e 'Faster: Download, unzip, flash, all at once. <b>IMG does not get saved to disk</b>.
Slower: Download and unzip, <u>then</u> flash. Raw IMG file remains.' | yad --list --separator='\n' \
  	--center --width=570 --height=50 --no-click --no-headers --text="Select a download program:" \
  	--column=Name --title="Download Options" --window-icon="${DIRECTORY}/icons/logo-64.png" \
  	--button='Cancel'!"${DIRECTORY}/icons/exit.png":1 \
  	--button='Flash'!"${DIRECTORY}/icons/burn.png":0 \
  	2>/dev/null)"
  button=$?
  if [ ! -z "$output" ];then
    output="$(echo "$output" | awk '{print $1}')" #get only first word
    output="${output::-1}" #remove colon from end of first word
  fi
  
  #print values to terminal
  echo "Output: ${output}EOO"
  echo "Button: ${button}EOB"
  
  if [ $button -eq 252 ] || [ $button -eq 143 ] || [ $button -eq 1 ];then
    #if window manager x was pressed
    #                     or if yad was killed
    #                                           or if cancel was pressed
    #then exit the program
    exit 0       
  fi
  
  if [ "$output" = Slower ];then
    startseconds=$(cat /proc/uptime | awk '{print $1}' | awk '{print int($1+0.5)}')
    
    (echo "0"
    #download-img is a temporary folder the script downloads its disk image to
    #the script has to get the full filename
    #temporarily storing in this folder prevents issues if there is already a img in the home directory
    echo "# Removing residual folder ${HOME}/download-img"
    rm -rf "${HOME}/download-img"
    
    mkdir download-img
    cd download-img
    echo 10
    
    echo "# Step 1: $FROM"
    wget -qO- "$URL" | busybox unzip -
    
    DL_IMG_LOC="$(find "$(pwd)" -type f)"
    cd "$HOME"
    
    echo "# Step 2: flashing device."
    echo 40
    sudo dd if="$DL_IMG_LOC" of="$TO" bs=10M status=progress
    
    echo "# Flash finished. Cleaning up..."
    echo 90
    mv "$DL_IMG_LOC" "$HOME"
    rm -rf "${HOME}/download-img"
    
    #get new img location and add it to imglist
    filename="$(echo "$DL_IMG_LOC" | awk -F '/' 'NF>1{print $NF}')"
    echo "${HOME}/${filename}" >> "${DIRECTORY}/imglist"
    
    ) |
    yad --progress --auto-kill  --auto-close --title="Flash" --center \
    	--window-icon="${DIRECTORY}/icons/logo-64.png" 2>/dev/null
    
    #get seconds of uptime at end to calculate time taken to flash
    endseconds=$(cat /proc/uptime | awk '{print $1}' | awk '{print int($1+0.5)}')
    
    yad --wrap --text="Flashing complete.\nThat took $((endseconds-startseconds)) seconds.\n You can close the window now." --title=Flashing --window-icon="${DIRECTORY}/icons/logo-64.png" --width=300 --height=100 \
    	--center \
    	--no-buttons 2>/dev/null
  else
    
    #if no action selected, Faster download mode is assumed.
    
    #get seconds of uptime at start to calculate time taken to flash
    startseconds=$(cat /proc/uptime | awk '{print $1}' | awk '{print int($1+0.5)}')
    
    (echo "# Flashing directly from Internet..."
    sudo bash -c "wget -qO- "$URL" | busybox unzip - -p >${TO}"
    
    )| yad --progress --pulsate --title=Flashing --window-icon="${DIRECTORY}/icons/logo-64.png" \
    	--width=300 --height=100 --center --auto-close --auto-kill 2>/dev/null
    sudo killall wget
        
    #get seconds of uptime at end to calculate time taken to flash
    endseconds=$(cat /proc/uptime | awk '{print $1}' | awk '{print int($1+0.5)}')
    
    yad --wrap --text="Flashing complete.\nThat took $((endseconds-startseconds)) seconds.\nYou can close the window now." --title=Flashing --window-icon="${DIRECTORY}/icons/logo-64.png" --width=300 --height=100 \
    	--center \
    	--no-buttons 2>/dev/null
    exit 0
  fi
  
else
  #copy mode
  #not download mode
  
  #get seconds of uptime at start to calculate time taken to flash
  startseconds=$(cat /proc/uptime | awk '{print $1}' | awk '{print int($1+0.5)}')
  
  #lxterminal --title="Standard Flash" -e
  
  #convert device path to device name
  devname="$(lsblk -o name,path | grep "$TO" | awk '{print $1}' | head -n 1)"
  echo "Devname: ${devname}EOD"
  
  echo -n 'Filetype: '
  #IMG FILE ----------------
  if [[ "$FROM" == *".img" ]] && [ -f "$FROM" ];then
    echo 'img'
    
    #get seconds of uptime at start to calculate time taken to flash
    startseconds=$(cat /proc/uptime | awk '{print $1}' | awk '{print int($1+0.5)}')
    
    (echo "# Flashing from IMG file..."
    sudo dd if="$FROM" of="$TO" bs=10M status=progress)| yad --progress --pulsate \
    	--title=Flashing --window-icon="${DIRECTORY}/icons/logo-64.png" \
    	--width=300 --height=100 --center --auto-close --auto-kill 2>/dev/null
    
    #get seconds of uptime at end to calculate time taken to flash
    endseconds=$(cat /proc/uptime | awk '{print $1}' | awk '{print int($1+0.5)}')
    
    yad --wrap --text="Flashing complete.\nThat took $((endseconds-startseconds)) seconds.\nYou can close the window now." --title=Flashing --window-icon="${DIRECTORY}/icons/logo-64.png" --width=300 --height=100 \
    	--center \
    	--no-buttons 2>/dev/null
    exit 0
    
    
  #ZIP FILE ----------------
  elif [[ "$FROM" == *".zip" ]] && [ -f "$FROM" ];then
    echo 'zip'

    #get seconds of uptime at start to calculate time taken to flash
    startseconds=$(cat /proc/uptime | awk '{print $1}' | awk '{print int($1+0.5)}')
    
    (echo "# Flashing from ZIP file..."
    sudo bash -c "busybox unzip "$FROM" -p > "$TO""
    )| yad --progress --pulsate \
    	--title=Flashing --window-icon="${DIRECTORY}/icons/logo-64.png" \
    	--width=300 --height=100 --center --auto-close --auto-kill 2>/dev/null
    
    #get seconds of uptime at end to calculate time taken to flash
    endseconds=$(cat /proc/uptime | awk '{print $1}' | awk '{print int($1+0.5)}')
    
    yad --wrap --text="Flashing complete.\nThat took $((endseconds-startseconds)) seconds.\nYou can close the window now." --title=Flashing --window-icon="${DIRECTORY}/icons/logo-64.png" --width=300 --height=100 \
    	--center \
    	--no-buttons 2>/dev/null
    exit 0  
    
  #NOT FOUND ----------------
  else
    echo 'not found!'
    yad --wrap --text="File not found.\nTry again?" --title='Pi Power Tools' --window-icon="${DIRECTORY}/icons/logo-64.png" \
    	--center --text-align=center \
    	--button="No!${DIRECTORY}/icons/exit.png:1" --button="Yes!${DIRECTORY}/icons/forward.png:0" \
    	2>/dev/null || exit 0
  fi
fi

done

#dd: 2:59
#etcher: 3:47
#cp: 5:18
#download&unzip to dev: 3:27



